1.1 sub_program p1(n)
      s=0......................1
      for i=1 to n do..........n+1
        for j=1 to i do........nxi+n
          for k=1 to j do......nxixj+n
            s=s+1..............nxixj
          end(for).............nxixj
        end(for)...............nxi
      end(for).................n
    fin (sub_programa)
Contador de frecuencias=      3nxixj + 2nxi + 4n + 2
Orden de Magnitud O(nxixj)




1.3 sub_programa p3(vec,n,x)
      i=1.....................1
      j=n.....................1
      do......................log2n
        k=(i+j)/2.............log2n
        if vec(k)<=x then.....log2n
          i=k+1...............log2n
        else
          j=k-1
        end(if)..............log2n
      while i<=j.............log2n
    fin (sub_programa)
Contador de frecuencias=      6log2n+2
Logaritmo de base 2 de n 




1.5 sub_programa p3(vec,n,x)
      read(n).................1
      s=0.....................1
      i=2.....................1
      while i>=n do...........login+1
        s=s+1.................login
        i=i*i.................login
      end(while)..............login
      write(n,s)..............1
    fin (sub_programa)
Contador de frecuencias=      4login+4
Logaritmo de base i de n 




Algortimo 1
function(x0, n, N=10000000, d=2){...............1
  x = numeric(0)................................1
  for(i in 1:n){................................n+1
    x[i] = ifelse(i==1, x0^d%%N, x[i-1]^d%%N)...n
  }
  x = x[x!=0]...................................1
  list("R" = x/N, "x" = x)......................1
}
Contador de frecuencias =                       2n+5
lineal O(n)




Algortimo 2
int main (void)
{
    char palabra[255];...................................................1
    int i = 0, j;........................................................1
    printf ("Ingrese una palabra: ");....................................1
    scanf ("%s", palabra);...............................................1
    j = strlen (palabra) - 1;............................................1
    while (i < j && tolower (palabra[i]) == tolower (palabra[j]))........n+1
    {
        i++;.............................................................n
        j--;.............................................................n
    }
    printf ("\nLa palabra '%s' ", palabra);..............................1
    if (i >= j)..........................................................1
        printf ("s\241");................................................1
    else
        printf ("no");
    printf (" es pal\241ndrome.\n\n");
    system ("pause");....................................................1
    return EXIT_SUCCESS;.................................................1
}
Contador de frecuencias =                                                3n+11
lineal O(n)




Algortimo 3
void funcion(const int nodo, int nodoAct){.............................................1
    mark[nodoAct] = true;..............................................................1
    if(mark[nodo]==true) return;.......................................................1
    if (nodoAct == nodo){..............................................................1
            printf("'%d'n",nodo);......................................................1
            return;....................................................................1
    }else if(mark[nodo]==true) return;
    else{..............................................................................1
        printf("%d ",nodoAct);.........................................................1

        int T = (int)graph.G[nodoAct].size();..........................................1
        for(int i = 0; i < T; ++i).....................................................n+1
        {
            if (!mark[graph.G[nodoAct][i].node]) DFS(nodo, graph.G[nodoAct][i].node);..n
        }
    }
}
Contador de frecuencias =                                                              2n+10
lineal O(n)

